{"version":3,"sources":["Components/MyUrlField.js","Components/Users.js","Components/PostFilter.js","Components/posts.js","Components/PostEdit.js","Components/PostCreate.js","Components/Dashboard.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","link","textDecoration","icon","width","paddingLeft","MyUrlField","record","source","classes","href","className","UserList","props","List","Datagrid","rowClick","TextField","EmailField","PostFilter","Filter","TextInput","label","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","filters","disabled","ReferenceField","EditButton","DeleteButton","PostTitle","title","PostEdit","Edit","SimpleForm","multiline","PostCreate","Create","Card","CardHeader","CardContent","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","authProvider","Resource","name","list","edit","create","PostIcon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03cba88d.chunk.js","sourcesContent":["// // in src/MyUrlField.js\r\n// import * as React from \"react\";\r\n\r\n// const MyUrlField = ({ record = {}, source }) =>\r\n//     <a href={record[source]}>\r\n//         {record[source]}\r\n//     </a>;\r\n\r\n// export default MyUrlField;\r\n\r\n\r\n\r\n\r\n\r\nimport * as React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\n\r\nconst useStyles = makeStyles({\r\n    link: {\r\n        textDecoration: 'none',\r\n    },\r\n    icon: {\r\n        width: '0.5em',\r\n        paddingLeft: 2,\r\n    },\r\n});\r\n\r\nconst MyUrlField = ({ record = {}, source }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <a href={record[source]} className={classes.link}>\r\n            {record[source]}\r\n            <LaunchIcon className={classes.icon} />\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default MyUrlField;","import * as React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField  } from 'react-admin';\r\nimport MyUrlField from './MyUrlField';\r\n\r\nexport const UserList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"name\" />\r\n            <EmailField source=\"email\" />\r\n            <TextField source=\"phone\" />            \r\n            <MyUrlField  source=\"website\" />\r\n            <TextField source=\"company.name\" />\r\n        </Datagrid>\r\n    </List>\r\n);","import * as React from \"react\";\r\nimport { List, Datagrid, TextField, ReferenceField, EditButton , TextInput, ReferenceInput, SelectInput ,Filter, DeleteButton} from 'react-admin';\r\n\r\n\r\n\r\n\r\nexport const PostFilter = (props) => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n        <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n            <SelectInput optionText=\"name\" />\r\n        </ReferenceInput>\r\n    </Filter>\r\n);","import React from \"react\";\r\nimport { List, Datagrid, TextField, ReferenceField, EditButton , DeleteButton} from 'react-admin';\r\nimport {PostFilter} from './PostFilter'\r\n// import firebase from './../Utill/firebase'\r\n// const [todoList, setTodoList] = useState()\r\n\r\n\r\n\r\n\r\nexport const PostList = (props) => (\r\n    \r\n    <List filters={<PostFilter />} {...props}>\r\n        <Datagrid>\r\n            <TextField disabled source=\"id\"   />\r\n            <ReferenceField source=\"userId\" reference=\"users\">\r\n                <TextField source=\"name\" />\r\n            </ReferenceField>\r\n            <TextField source=\"title\" />\r\n            <TextField source=\"body\" />\r\n            <EditButton />\r\n            <DeleteButton />\r\n        </Datagrid>\r\n    </List>\r\n\r\n   \r\n);\r\n\r\n\r\n\r\n// export class PostList extends Component {\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {PostList2}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const PostList = props => (\r\n    \r\n//     <List filters={<PostFilter />} {...props}>\r\n//         <Datagrid>\r\n//             <TextField disabled source=\"id\"   />\r\n//             <ReferenceField source=\"userId\" reference=\"users\">\r\n//                 <TextField source=\"name\" />\r\n//             </ReferenceField>\r\n//             <TextField source=\"title\" />\r\n//             <TextField source=\"body\" />\r\n//             <EditButton />\r\n//             <DeleteButton />\r\n//         </Datagrid>\r\n//     </List>\r\n\r\n   \r\n// );\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as React from \"react\";\r\nimport {  Edit, SimpleForm, TextInput, ReferenceInput, SelectInput } from 'react-admin';\r\n\r\nconst PostTitle = ({ record }) => {\r\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\r\n}\r\n\r\nexport const PostEdit = props => (\r\n    <Edit title={<PostTitle />} {...props}>\r\n        <SimpleForm>\r\n           <TextInput disabled source=\"id\" />\r\n            <ReferenceInput source=\"userId\" reference=\"users\">\r\n               <SelectInput disabled optionText=\"id\" />\r\n            </ReferenceInput>\r\n            <TextInput source=\"title\" />\r\n           <TextInput multiline source=\"body\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import React from \"react\";\r\nimport { SimpleForm, TextInput, ReferenceInput, SelectInput, Create } from 'react-admin';\r\n\r\n\r\n\r\n const PostCreate = props => (\r\n    //  [title, setTitle] = useState('')\r\n    \r\n    <Create {...props}>    \r\n        <SimpleForm>\r\n            <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput>\r\n            <TextInput source=\"title\" />\r\n            <TextInput multiline source=\"body\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport default PostCreate","import * as React from \"react\";\r\nimport './../App.css';\r\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\r\n\r\nexport default (props) => (\r\n    <Card>\r\n        <CardHeader title=\"administration\" />\r\n        <CardContent>\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-sm'>\r\n                        <div className='inner'>\r\n                            <h4>Number User: 30 User</h4>\r\n                        </div>\r\n                    </div>\r\n                    <div className='col-sm'>\r\n                        <div className='inner'>\r\n                            <h4>Number Posts: 30 Posts</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\n\r\n","// in src/authProvider.js\r\nexport default {\r\n    // called when the user attempts to log in\r\n    login: ({ username }) => {\r\n        localStorage.setItem('username', username);\r\n        // accept all username/password combinations\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user clicks on the logout button\r\n    logout: () => {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    },\r\n    // called when the API returns an error\r\n    checkError: ({ status }) => {\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user navigates to a new location, to check for authentication\r\n    checkAuth: () => {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    },\r\n    // called when the user navigates to a new location, to check for permissions / roles\r\n    getPermissions: () => Promise.resolve(),\r\n};","import React from 'react';\nimport { Admin, Resource   } from 'react-admin'\nimport jsonServerProvider from 'ra-data-json-server';\nimport { UserList } from './Components/Users';\nimport { PostList } from './Components/posts';\nimport { PostEdit } from './Components/PostEdit';\nimport  PostCreate  from './Components/PostCreate'\nimport Dashboard from './Components/Dashboard';\nimport authProvider from './authProvider';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n\n\nconst App = () => {\n  return(\n    <Admin dashboard={Dashboard} authProvider={authProvider}  dataProvider={dataProvider} >\n      <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostIcon} />\n      <Resource name=\"users\" list={UserList} icon={UserIcon} />\n    </Admin>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}